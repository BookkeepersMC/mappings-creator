package mappings.plugin.plugin;

import org.gradle.api.Action;
import org.gradle.api.Project;
import org.gradle.api.artifacts.Configuration;
import org.gradle.api.file.Directory;
import org.gradle.api.file.FileTree;
import org.gradle.api.plugins.PluginContainer;
import org.gradle.api.tasks.JavaExec;
import org.gradle.api.tasks.TaskCollection;
import org.gradle.api.tasks.TaskContainer;
import org.gradle.api.tasks.TaskProvider;
import org.jetbrains.annotations.NotNull;
import mappings.plugin.constants.Classifiers;
import mappings.plugin.constants.Extensions;
import mappings.plugin.extension.MapV2Extension;
import mappings.plugin.extension.MappingsExtension;
import mappings.plugin.constants.Namespaces;
import mappings.plugin.plugin.abstraction.DefaultExtensionedMappingsProjectPlugin;
import mappings.plugin.task.build.AddProposedMappingsTask;
import mappings.plugin.task.build.InvertPerVersionMappingsTask;
import mappings.plugin.task.build.MappingsV2JarTask;
import mappings.plugin.task.build.MergeTinyV2Task;
import mappings.plugin.task.jarmapping.MapNamedJarTask;
import mappings.plugin.task.jarmapping.MapPerVersionMappingsJarTask;
import mappings.plugin.task.setup.ConstantsJarTask;
import mappings.plugin.task.setup.DownloadMinecraftLibrariesTask;
import mappings.plugin.task.unpick.CombineUnpickDefinitionsTask;
import mappings.plugin.task.unpick.RemapUnpickDefinitionsTask;
import mappings.plugin.task.unpick.UnpickJarTask;
import mappings.plugin.task.unpick.gen.OpenGlConstantUnpickGenTask;
import mappings.plugin.task.unpick.gen.UnpickGenTask;

import static mappings.plugin.constants.Constants.UNPICK_NAME;

/**
 * {@linkplain TaskContainer#register Registers} tasks that output mappings in Quilt's v2 format.
 * <p>
 * Applies:
 * <ul>
 *     <li> {@link MappingsBasePlugin}
 *     <li> {@link MinecraftJarsPlugin}
 *     <li> {@link MapMinecraftJarsPlugin}
 * </ul>
 * Additionally:
 * <ul>
 *     <li> creates and populates the {@value UNPICK_CLI_CONFIGURATION_NAME} {@link Configuration}
 *     <li> {@linkplain TaskCollection#configureEach(Action) configures} {@link UnpickJarTask}s'
 *          {@link JavaExec#classpath(Object...) classpath} to include the
 *          {@value UNPICK_CLI_CONFIGURATION_NAME} {@link Configuration}
 *    <li> {@linkplain TaskCollection#configureEach(Action) configures}
 *          the following defaults for {@link MappingsV2JarTask}s:
 *          <ul>
 *              <li> {@link MappingsV2JarTask#getUnpickMeta() unpickMeta}: {@link MappingsExtension}'s
 *                   {@link MappingsExtension#getUnpickMeta() unpickMeta}
 *              <li> {@link MappingsV2JarTask#getUnpickDefinition() unpickDefinition}:
 *                   {@link CombineUnpickDefinitionsTask}'s {@link CombineUnpickDefinitionsTask#getOutput() output}
 *          </ul>
 * </ul>
 *
 * Note: v2 {@value Namespaces#INTERMEDIARY} mappings are created by {@link MapIntermediaryPlugin} tasks.
 */
public abstract class MapV2Plugin extends DefaultExtensionedMappingsProjectPlugin<MapV2Extension> {
    public static final String UNPICK_CLI_CONFIGURATION_NAME = UNPICK_NAME + "Cli";

    @Override
    protected MapV2Extension applyImpl(@NotNull Project project) {
        final Configuration unpickCli = project.getConfigurations().create(UNPICK_CLI_CONFIGURATION_NAME);

        this.addDependencyWithCapability(
            project.getDependencies(), unpickCli,
            "quilt.internal:classpath-holders",
            "quilt.internal:classpath-holders-unpick-cli"
        );

        // apply required plugins and save their registered objects
        final PluginContainer plugins = project.getPlugins();

        final MappingsExtension quiltExt = plugins.apply(MappingsBasePlugin.class).getExt();

        final MinecraftJarsPlugin.Tasks minecraftJarsTasks =
            plugins.apply(MinecraftJarsPlugin.class).getExt().getTasks();
        final TaskProvider<DownloadMinecraftLibrariesTask> downloadMinecraftLibraries =
            minecraftJarsTasks.downloadMinecraftLibraries();

        final MapMinecraftJarsPlugin.Tasks mapMinecraftJarsTasks =
            plugins.apply(MapMinecraftJarsPlugin.class).getExt().getTasks();
        final TaskProvider<MapPerVersionMappingsJarTask> mapPerVersionMappingsJar =
            mapMinecraftJarsTasks.mapPerVersionMappingsJar();
        final TaskProvider<InvertPerVersionMappingsTask> invertPerVersionMappings =
            mapMinecraftJarsTasks.invertPerVersionMappings();
        final TaskProvider<AddProposedMappingsTask> insertAutoGeneratedMappings =
            mapMinecraftJarsTasks.insertAutoGeneratedMappings();

        // register this plugin's tasks
        final TaskContainer tasks = project.getTasks();

        final var mergeTinyV2 = tasks.register(
            MergeTinyV2Task.MERGE_TINY_V_2_TASK_NAME,
            MergeTinyV2Task.class,
            task -> {
                task.getInput().convention(
                    insertAutoGeneratedMappings.flatMap(AddProposedMappingsTask::getOutputMappings)
                );

                task.getHashedTinyMappings().convention(
                    invertPerVersionMappings.flatMap(InvertPerVersionMappingsTask::getInvertedTinyFile)
                );

                task.getOutputMappings().convention(
                    this.provideMappingsBuildFile("merged2." + Extensions.TINY)
                );
            }
        );

        tasks.register(
            OpenGlConstantUnpickGenTask.OPEN_GL_UNPICK_GEN_TASK_NAME,
            OpenGlConstantUnpickGenTask.class,
            task -> {
                task.getPerVersionMappingsJar().convention(
                    mapPerVersionMappingsJar.flatMap(MapPerVersionMappingsJarTask::getOutputJar)
                );

                task.getLwjglFile().fileProvider(OpenGlConstantUnpickGenTask.provideLwjgl(
                    downloadMinecraftLibraries.flatMap(DownloadMinecraftLibrariesTask::getArtifactsByName)
                ));

                task.getUnpickGlStateManagerDefinitions().convention(
                    this.provideMappingsBuildFile(UNPICK_NAME + "_glstatemanager." + Extensions.UNPICK)
                );

                task.getUnpickGlDefinitions().convention(
                    this.provideMappingsBuildFile(UNPICK_NAME + "_gl." + Extensions.UNPICK)
                );
            }
        );

        final var combineUnpickDefinitions = tasks.register(
            CombineUnpickDefinitionsTask.COMBINE_UNPICK_DEFINITIONS_TASK_NAME,
            CombineUnpickDefinitionsTask.class,
            task -> {
                task.getUnpickDefinitions().from(project.getTasks().withType(UnpickGenTask.class));

                task.getOutput().convention(
                    this.provideMappingsBuildFile("definitions." + Extensions.UNPICK)
                );
            }
        );

        final var remapUnpickDefinitions = tasks.register(
            RemapUnpickDefinitionsTask.REMAP_UNPICK_DEFINITIONS_TASK_NAME,
            RemapUnpickDefinitionsTask.class,
            task -> {
                task.getInput().convention(combineUnpickDefinitions.flatMap(CombineUnpickDefinitionsTask::getOutput));

                task.getMappings().convention(mergeTinyV2.flatMap(MergeTinyV2Task::getOutputMappings));

                task.getOutput().convention(
                    this.provideMappingsBuildFile(Namespaces.INTERMEDIATE + "-definitions." + Extensions.UNPICK)
                );
            }
        );

        // constants are configured in build.gradle because they're from a project source set
        final var constantsJar = tasks.register(ConstantsJarTask.CONSTANTS_JAR_TASK_NAME, ConstantsJarTask.class);

        tasks.withType(UnpickJarTask.class).configureEach(task -> {
            task.classpath(unpickCli);

            task.getInputFile().convention(
                mapPerVersionMappingsJar.flatMap(MapPerVersionMappingsJarTask::getOutputJar)
            );

            task.getDecompileClasspathFiles().from(
                downloadMinecraftLibraries.flatMap(DownloadMinecraftLibrariesTask::getLibrariesDir)
                    .map(Directory::getAsFileTree)
                    .map(FileTree::getFiles)
            );
        });

        final var unpickHashedJar = tasks.register(
            UnpickJarTask.UNPICK_HASHED_JAR_TASK_NAME,
            UnpickJarTask.class,
            task -> {
                task.getUnpickDefinition().convention(
                    remapUnpickDefinitions.flatMap(RemapUnpickDefinitionsTask::getOutput)
                );

                task.getUnpickConstantsJar().set(constantsJar.flatMap(ConstantsJarTask::getArchiveFile));

                task.getOutputFile().convention(
                    this.provideMappedMinecraftBuildFile(quiltExt.provideSuffixedMinecraftVersion(
                        "-" + Classifiers.INTERMEDIATE_UNPICKED + "." + Extensions.JAR
                    ))
                );
            }
        );

        final var mapNamedJar = tasks.register(
            MapNamedJarTask.MAP_NAMED_JAR_TASK_NAME,
            MapNamedJarTask.class,
            task -> {
                task.getInputJar().convention(unpickHashedJar.flatMap(UnpickJarTask::getOutputFile));

                task.getMappingsFile().convention(
                    insertAutoGeneratedMappings.flatMap(AddProposedMappingsTask::getOutputMappings)
                );

                task.getOutputJar().convention(
                    this.provideMappedMinecraftBuildFile(quiltExt.provideSuffixedMinecraftVersion(
                        "-" + Classifiers.NAMED + "." + Extensions.JAR
                    ))
                );
            }
        );

        tasks.withType(MappingsV2JarTask.class).configureEach(task -> {
            task.getUnpickMeta().convention(quiltExt.getUnpickMeta());

            task.getUnpickDefinition().convention(
                combineUnpickDefinitions.flatMap(CombineUnpickDefinitionsTask::getOutput)
            );
        });

        {
            final var v2UnmergedMappingsJar = tasks.register(
                MappingsV2JarTask.V2_UNMERGED_MAPPINGS_JAR_TASK_NAME,
                MappingsV2JarTask.class,
                quiltExt.getUnpickVersion()
            );
            v2UnmergedMappingsJar.configure(task -> {
                task.getMappings().convention(
                    insertAutoGeneratedMappings.flatMap(AddProposedMappingsTask::getOutputMappings)
                );

                task.getArchiveClassifier().convention(Classifiers.V2);
            });
        }

        final var v2MergedMappingsJar = tasks.register(
            MappingsV2JarTask.V2_MERGED_MAPPINGS_JAR_TASK_NAME,
            MappingsV2JarTask.class,
            quiltExt.getUnpickVersion()
        );
        v2MergedMappingsJar.configure(task -> {
            task.getMappings().convention(mergeTinyV2.flatMap(MergeTinyV2Task::getOutputMappings));

            task.getArchiveClassifier().convention(Classifiers.MERGED_V2);
        });

        return project.getExtensions().create(
            MapV2Extension.NAME, MapV2Extension.class,
            new Tasks(mergeTinyV2, unpickHashedJar, mapNamedJar)
        );
    }

    public record Tasks(
        TaskProvider<MergeTinyV2Task> mergeTinyV2,
        TaskProvider<UnpickJarTask> unpickHashedJar,
        TaskProvider<MapNamedJarTask> mapNamedJar
    ) { }
}
